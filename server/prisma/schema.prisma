generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ----- ENUMS -----
enum RootRole {
  ADMIN
  USER
}

enum FileType {
  FILE
  FOLDER
}
enum FileRole {
  EDITOR
  VIEWER
  COMMENTER
}

enum ProjectRole {
  PROJECT_OWNER
  PROJECT_MAINTAINER
  PROJECT_CONTRIBUTOR
  PROJECT_VIEWER
}

enum AuditAction {
  CREATE
  EDIT
  DELETE
  VIEW
}

/// ----- MODELS -----

model User {
  id                 Int                   @id @default(autoincrement())
  name               String
  email              String                @unique
  password           String?
  rootRole           RootRole              @default(USER)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  // Relations
  ownedProjects      Project[]             @relation("ProjectOwner")
  memberships        ProjectMembership[]
  fileAccesses       FileAccess[]
  fileVersions       FileVersion[]         @relation("FileVersionCreatedBy")
  createdNodes       Node[]
  auditLogs          AuditLog[]            @relation("AuditLogUser")
}

model Project {
  id                 Int                   @id @default(autoincrement())
  name               String
  description        String?
  ownerId            Int
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  // Relations
  owner              User                  @relation("ProjectOwner", fields: [ownerId], references: [id])
  memberships        ProjectMembership[]
  nodes              Node[]
  auditLogs          AuditLog[]            @relation("AuditLogProject")
}

model ProjectMembership {
  id                 Int                   @id @default(autoincrement())
  userId             Int
  projectId          Int
  joinedAt           DateTime              @default(now())
  projectRole        ProjectRole           @default(PROJECT_CONTRIBUTOR)

  // Relations
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  project            Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([projectId])
  @@index([userId])
}


model Node {
  id        Int       @id @default(autoincrement())
  name      String
  type      FileType
  content   String?
  parentId  Int?
  projectId Int
  createdById Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent    Node?   @relation("NodeChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children  Node[]  @relation("NodeChildren")
  createdBy User    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  accessList FileAccess[]
  versions  FileVersion[]
  auditLogs AuditLog[] @relation("AuditLogFile")

  @@index([projectId])
  @@index([parentId])
	@@map("Node")
}

model FileAccess {
  id        Int      @id @default(autoincrement())
  nodeId    Int
  userId    Int
  role      FileRole
  grantedAt DateTime @default(now())

  // Relations
  node      Node     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([nodeId, userId])
  @@index([userId])
  @@index([nodeId])
}

model FileVersion {
  id            Int      @id @default(autoincrement())
  nodeId        Int
  content       String
  versionNumber Int
  createdById   Int
  createdAt     DateTime @default(now())

  // Relations
  node          Node     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  createdBy     User     @relation("FileVersionCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([nodeId])
  @@index([createdById])
}

model AuditLog {
  id                 Int                   @id @default(autoincrement())
  userId             Int
  nodeId             Int?
  projectId          Int?
  action             AuditAction
  timestamp          DateTime              @default(now())

  // Relations
  user               User                  @relation("AuditLogUser", fields: [userId], references: [id], onDelete: Cascade)
  node               Node?                 @relation("AuditLogFile", fields: [nodeId], references: [id], onDelete: Cascade)
  project            Project?              @relation("AuditLogProject", fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([nodeId])
  @@index([projectId])
}
